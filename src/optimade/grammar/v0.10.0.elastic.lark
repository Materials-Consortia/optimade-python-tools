// optimade v0.10.0 grammar spec in lark grammar format,
// written to work with the elasticsearch filtertransformer

start: or_expr

or_expr: [or_expr "OR"] and_expr

and_expr: [and_expr "AND"] atom_expr

atom_expr: parenthesis | not_expr

not_expr: "NOT" parenthesis

parenthesis: "(" or_expr ")" | operator

operator: cmp_op | has_list_op | has_op | has_only_op | known_op | string_op

cmp_op: value CMP_OPERATOR value

known_op: quantity "IS" KNOWN_QUALIFIER

string_op: contains_op | starts_op | ends_op

contains_op: quantity "CONTAINS" string_literal
starts_op: quantity "STARTS" ["WITH"] string_literal
ends_op: quantity "ENDS" ["WITH"] string_literal

has_op: quantity_tuple "HAS" predicate_tuple

has_list_op: quantity_tuple "HAS" LIST_QUALIFIER list

has_only_op: quantity "HAS" "ONLY" list

list: (predicate_tuple ",")* predicate_tuple

predicate_tuple: (predicate ":")* predicate

quantity_tuple: (quantity ":")* quantity

predicate: [CMP_OPERATOR] literal

value: quantity | literal | length

length: "LENGTH" quantity

literal: int_literal | float_literal | string_literal

quantity: CNAME

int_literal: SIGNED_INT
float_literal: SIGNED_FLOAT
string_literal: ESCAPED_STRING

CMP_OPERATOR: /<=?|>=?|!?=/
LIST_QUALIFIER: /ALL|ANY/
KNOWN_QUALIFIER: /KNOWN|UNKNOWN/

%import common.CNAME
%import common.SIGNED_FLOAT
%import common.SIGNED_INT
%import common.ESCAPED_STRING
%import common.WS
%ignore WS
