name: Testing, linting, and OpenAPI validation

on:
  pull_request:
  push:
    branches:
    - master

jobs:

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools
        pip install flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics


  pre-commit:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools
        pip install -e .[dev]

    - name: Run pre-commit
      run: |
        pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )


  openapi:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install -U setuptools
        python -m pip install -r .github/workflows/requirements.txt
        python -m pip install -e .[testing]
        docker pull quen2404/openapi-diff

    - name: Validate OpenAPI specifications
      run: |
        openapi-spec-validator openapi/openapi.json
        openapi-spec-validator openapi/index_openapi.json

    - name: Update OpenAPI schemes
      run: |
        python -c "from optimade.server.main import app, update_schema; update_schema(app)"
        python -c "from optimade.server.main_index import app, update_schema; update_schema(app)"

    - name: Check if OpenAPI schemes match
      run: |
        .ci/openapi_diff.sh
        .ci/index_openapi_diff.sh


  docker-image:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build the Docker images
      run: docker-compose build

    - name: Start Docker image - server
      run: |
        docker-compose up optimade &
        .github/workflows/wait_for_it.sh localhost:3213 -t 120
        sleep 15

    - name: Test server, including OPTIONAL base URLs
      uses: Materials-Consortia/optimade-validator-action@v1
      with:
        port: 3213
        path: /
        all versioned paths: yes
        validator version: ${{ github.sha }}  # This ensures the head of a PR or latest push commit is tested

    - name: Start Docker image - index server
      run: |
        docker-compose up optimade-index &
        .github/workflows/wait_for_it.sh localhost:3214 -t 120
        sleep 15

    - name: Test index server, including OPTIONAL base URLs
      uses: Materials-Consortia/optimade-validator-action@v1
      with:
        port: 3214
        path: /
        all versioned paths: yes
        index: yes
        validator version: ${{ github.sha }}  # This ensures the head of a PR or latest push commit is tested

  deps_static:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        python-version: [3.6, 3.7, 3.8]

    services:
      mongo:
        image: mongo:4.2
        ports:
        - 27017:27017
      postgres:
        image: postgres:10
        env:
          POSTGRES_DB: test_django
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install latest compatible versions of immediate dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools
        # Install static dependencies followed by "normal" install
        python -m pip install -r .github/workflows/requirements.txt
        pip install -e .[testing]

    - name: Run all tests (using a real MongoDB)
      run: pytest -rs --cov=./optimade/ --cov-report=xml
      env:
        OPTIMADE_CI_FORCE_MONGO: 1

    - name: Run tests only for index meta-db (using `mongomock`)
      run: pytest -rs --cov=./optimade/ --cov-report=xml --cov-append tests/server/test_middleware.py tests/server/test_server_validation.py tests/server/test_config.py
      env:
        OPTIMADE_CI_FORCE_MONGO: 0

    - name: Install adapter conversion dependencies
      run: |
        pip install -e .[all]
        # AiiDA-specific
        reentry scan

    - name: Setup up environment for AiiDA
      env:
        AIIDA_TEST_BACKEND: django
      run: .github/aiida/setup_aiida.sh

    - name: Run previously skipped tests for adapter conversion
      run: pytest -rs --cov=./optimade/ --cov-report=xml --cov-append tests/adapters/

    - name: Upload coverage to Codecov
      if: matrix.python-version == 3.7 && github.repository == 'Materials-Consortia/optimade-python-tools'
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        flags: unittests
        yml: ./.codecov.yml


  docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docs.txt
        pip install -e .

    - name: Build
      run: mkdocs build