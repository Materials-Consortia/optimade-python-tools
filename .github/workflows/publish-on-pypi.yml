name: Publish on PyPI

on:
  release:
    types:
    - published

jobs:

  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'Materials-Consortia/optimade-python-tools' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        persist-credentials: false
        submodules: true

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools requests
        pip install invoke
        pip install -e .[all]
        pip install -r requirements-docs.txt

    - name: Check released tag
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF: ${{ github.ref }}
      run: python .github/workflows/check_released_tag.py

    - name: Generate changelog
      uses: charmixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.OPTIMADE_PYTHON_TOOLS_RELEASE_TOKEN }}

    - name: Update Version
      run: invoke setver -v ${GITHUB_REF#refs/tags/}

    - name: Generate New OpenAPI JSON
      run: invoke update-openapijson

    - name: Commit files
      run: |
        git config --local user.email "dev@optimade.org"
        git config --local user.name "OPTIMADE Developers"
        mv -f CHANGELOG.md docs/

        git add docs/CHANGELOG.md
        git add openapi/index_openapi.json openapi/openapi.json
        git add optimade/__init__.py
        echo "::set-env name=push::0"
        git commit -m 'Release Updates' && echo "::set-env name=push::1" || echo "No changes to CHANGELOG.md"

    - name: Build source distribution
      run: python ./setup.py sdist

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}

    - name: Push forward version tag
      if: env.push == 1
      run: |
        git push origin :refs/tags/${GITHUB_REF#refs/tags/}
        git tag -fa ${GITHUB_REF#refs/tags/} -m "Push release ${GITHUB_REF#refs/tags/} tag to new release commit"

    - name: Temporarily disable "include administrators" branch protection
      uses: benjefferies/branch-protection-bot@master
      if: env.push == 1
      with:
        access-token: ${{ secrets.OPTIMADE_PYTHON_TOOLS_RELEASE_TOKEN }}
        branch: master
        enforce_admins: false

    - name: Push changes
      if: env.push == 1
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.OPTIMADE_PYTHON_TOOLS_RELEASE_TOKEN }}
        tags: true
        branch: master

    - name: Enable "include administrators" branch protection
      uses: benjefferies/branch-protection-bot@master
      if: always()  # Force to always run this step to ensure "include administrators" is always turned back on
      with:
        access-token: ${{ secrets.OPTIMADE_PYTHON_TOOLS_RELEASE_TOKEN }}
        enforce_admins: true
        branch: master

    - name: Build
      run: mkdocs build

    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: ./site
